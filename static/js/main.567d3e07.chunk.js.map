{"version":3,"sources":["logo.svg","test.js","myForm.js","view.js","Hello.js","App.js","serviceWorker.js"],"names":["module","exports","__webpack_require__","p","Test","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","changeColor","setState","favoritecolor","delHeader","show","state","console","log","react_default","a","createElement","type","onClick","id","prevProps","prevState","document","getElementById","innerHTML","_this2","setTimeout","favcol","React","Component","MyForm","myChangeHandler","event","username","target","value","shoot","assertThisInitialized","shoot2","b","bind","header","map","key","toString","color","onChange","ev","viewUpdate","Hello","_ref","name","App2","className","style","fontSize","backgroundColor","test","myForm","render","Boolean","window","location","hostname","match"],"mappings":"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","file":"static/js/main.567d3e07.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\n\r\nclass Test extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { favoritecolor: \"red\", show: true };\r\n  }\r\n  // called right before rendering the element(s) in the DOM.\r\n  static getDerivedStateFromProps(props, state) {\r\n    console.log(props, state, 'getDerivedStateFromProps');\r\n  return {favoritecolor: props.favcol };\r\n  }\r\n\r\n  //  React should continue with the rendering or not. default value is true\r\n  // To prevent the re-rendering of child component, we use the shouldComponentUpdate( )\r\n  shouldComponentUpdate() {\r\n    console.log('shouldComponentUpdate');\r\n    return false;\r\n  }\r\n  // render() method is required and will always be called, actually outputs the HTML to the DOM.\r\n  render() {\r\n    let myheader;\r\n    if (this.state.show) {\r\n      myheader = <p>remoced</p>\r\n    };\r\n    return (\r\n      <div>\r\n        <h1> World!</h1>\r\n        <h2>My Favorite Color is {this.state.favoritecolor}</h2>\r\n        <button type=\"button\" onClick={this.changeColor}>Change color</button>\r\n        <div id=\"div1\"></div>\r\n        <div id=\"div2\"></div>\r\n\r\n        <button type=\"button\" onClick={this.delHeader}>Delete Header</button>\r\n\r\n      </div>\r\n\r\n    );\r\n  }\r\n\r\n  // f the getSnapshotBeforeUpdate() method is present, you should also include the componentDidUpdate() method, otherwise you will get an error.\r\n  getSnapshotBeforeUpdate(prevProps, prevState) {\r\n    console.log('getSnapshotBeforeUpdate');\r\n    document.getElementById(\"div1\").innerHTML =\r\n      \"Before the update, the favorite was \" + prevState.favoritecolor;\r\n  }\r\n  componentDidUpdate() {\r\n    console.log('componentDidUpdate');\r\n\r\n    document.getElementById(\"div2\").innerHTML =\r\n      \"The updated favorite is \" + this.state.favoritecolor;\r\n  }\r\n\r\n  // called after the component is rendered.\r\n  componentDidMount() {\r\n    setTimeout(() => {\r\n      console.log('componentDidMount');\r\n      this.setState({ favoritecolor: \"yellow\" })\r\n    }, 1000)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    console.log(\"The component named Header is about to be unmounted.\");\r\n  }\r\n\r\n\r\n\r\n  changeColor = () => {\r\n    this.setState({ favoritecolor: \"blue\" });\r\n  }\r\n\r\n  delHeader = () => {\r\n    this.setState({ show: false });\r\n  }\r\n\r\n}\r\n\r\nexport default Test;","import React from 'react';\r\n\r\n// class type component declaration\r\nclass MyForm extends React.Component {\r\n  // in constructor initiate the component's properties.\r\n  constructor(props) {\r\n    // must call super it refers to the parent class.\r\n    super(props);\r\n    // component properties should be kept in an object called state.\r\n    this.state = { username: '' };\r\n\r\n    //   you must use regular functions instead of arrow functions you have to bind this to the component instance using the bind() method:\r\n    this.shoot = this.shoot.bind(this)\r\n  }\r\n\r\n  myChangeHandler = (event) => {\r\n    this.setState({ username: event.target.value });\r\n  }\r\n\r\n  shoot = () => {\r\n    console.log(this)\r\n    /*\r\n    The 'this' keyword refers to the component object\r\n    */\r\n  }\r\n\r\n  shoot2 = (a, b) => {\r\n    console.log(b.type, 'demo', a);\r\n    //      /*\r\n    //      'b' represents the React event that triggered the function,\r\n    //      in this case the 'click' event\r\n    //      */\r\n  }\r\n\r\n  \r\n  render() {\r\n    let header = '';\r\n    if (this.state.username) {\r\n      header = <h1>Hell {this.state.username}</h1>;\r\n    } else {\r\n      header = '';\r\n    }\r\n    \r\n    const ids = [1,2,3,4,5];\r\n    const listElements = ids.map((id)=>{\r\n     return(\r\n     <li key={id.toString()}>\r\n       {id}\r\n     </li>\r\n     )\r\n    })\r\n\r\n    return (\r\n      <div>\r\n        {header}\r\n\r\n        {/* props- declare inside the usage of component,  variable name, \r\n Props are also how you pass data from one component to another, as parameters. */}\r\n\r\n        <h2>I am a {this.props.color} Car!</h2>;\r\n\r\n        <p>Enter your name:</p>\r\n\r\n        <input\r\n          type='text'\r\n          onChange={this.myChangeHandler}\r\n        />\r\n        <button onClick={this.shoot}>Take the shot!</button>\r\n\r\n        <button onClick={(ev) => this.shoot2(\"Goal\", ev)}>Take the shot2!</button>\r\n\r\n        <button onClick={this.shoot2.bind(this, \"Goal\")}>Take the shot3!</button>\r\n\r\n    \r\n        \r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n\r\n// To show any component \r\nexport default MyForm;\r\n\r\n// Explain React state and props.\r\n// Props-\tState\r\n// Immutable-\tOwned by its component\r\n// Has better performance-\tLocally scoped\r\n// Can be passed to child components-\tWiteable/Mutable\r\n                        // has setState() method to modify properties\r\n                        // Changes to state can be asynchronous\r\n                        // can only be passed as props\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {\r\n    BrowserView,\r\n    MobileView,\r\n    isBrowser,\r\n    isMobile\r\n  } from \"react-device-detect\";\r\n  import React from 'react';\r\n\r\nfunction viewUpdate() {\r\n    var myStyle = {\r\n      fontSize: 100,\r\n      color: '#FF0000'\r\n   }\r\n  //  To write HTML on multiple lines, put the HTML inside parentheses:\r\n    return (\r\n        <div>\r\n  <BrowserView>\r\n    <h1> This is rendered only in browser </h1>\r\n</BrowserView>\r\n<MobileView>\r\n    <h1> This is rendered only on mobile </h1>\r\n</MobileView>\r\n        </div>\r\n      \r\n    );\r\n\r\n}\r\n\r\nexport default viewUpdate;\r\n","import React from 'react';\r\n\r\nexport default ({ name }) => <h1>Hel {name}!</h1>;\r\n\r\n\r\n","\r\nimport './App.css';\r\nimport Test from './test';\r\nimport MyForm from './myForm';\r\nimport viewUpdate from './view';\r\n\r\nimport logo from './logo.svg';\r\nimport React, { Component } from 'react';\r\nimport { render } from 'react-dom';\r\nimport Hello from './Hello';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\n// function type component declaration\r\n// functional components were called stateless components. Only class components were used for state management and lifecycle methods.\r\n\r\n// useState  hook:\r\n// in functional components, useState hook lets us define state for a component:\r\nfunction App2() {\r\n  var myStyle = {\r\n    fontSize: 100,\r\n    color: '#FF0000'\r\n  }\r\n  //  To write HTML on multiple lines, put the HTML inside parentheses:\r\n  return (\r\n    // only one parent element\r\n\r\n    // default code\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n\r\n        <h1>{1 + 1}</h1>\r\n        <h1>{1 == 1 ? 'True!' : 'False'}</h1>\r\n        <h1 style={myStyle}>Header</h1>\r\n        {/* Use backgroundColor instead of background-color: */}\r\n        <h1 style={{ backgroundColor: \"lightblue\" }}>Hello inline styling!</h1>\r\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />     */}\r\n      </header>\r\n      <div>\r\n        {/* simple component */}\r\n        <Test favcol=\"new\" />\r\n\r\n        <Hello name=\"jhh\" />\r\n        <MyForm color=\"red\" />\r\n\r\n\r\n       \r\n\r\n\r\n\r\n\r\n\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n\r\n\r\n}\r\n\r\nexport default App2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// you can also configure this in index.js\r\nrender(<App2 />, document.getElementById('root'));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":""}